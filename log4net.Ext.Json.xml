<?xml version="1.0"?>
<doc>
    <assembly>
        <name>log4net.Ext.Json</name>
    </assembly>
    <members>
        <member name="T:log4net.Util.TypeConverters.LayoutConverter">
            <summary>
            Supports conversion from string or <see cref="T:log4net.Util.PatternString"/> to <see cref="T:log4net.Layout.ILayout"/> type.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.LayoutConverter.Init(System.Boolean)">
            <summary>
            Initialize the environment: register Arrangement Type Converters 
            with the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.LayoutConverter.#ctor">
            <summary>
            Create instance, it will produce <see cref="T:log4net.Layout.PatternLayout"/>
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.LayoutConverter.#ctor(System.Boolean)">
            <summary>
            Create instance, it will produce <see cref="T:log4net.Layout.PatternLayout"/>
            or <see cref="T:log4net.Layout.SerializedLayout"/> if <paramref name="serialized"/>.
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.LayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.LayoutConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an <see cref="T:log4net.Layout.ILayout"/></param>
            <returns>the layout</returns>
        </member>
        <member name="T:log4net.Layout.SerializedLayout">
            <summary>
            Enable an external serializer (JSON) to participate in PaternLayout 
            with variable member configuration using <see cref="T:log4net.Layout.Arrangements.IArrangement"/>s.
            </summary>
            <remarks>
            <para>
            The goal of this class is to serialize a <see cref="T:log4net.Core.LoggingEvent"/> 
            as a string. The results depend on the <i>Members</i> organized by <see cref="T:log4net.Layout.Arrangements.IArrangement"/>s.
            </para>
            <para>
            Custom <i>renderer</i> and <i>fetcher</i> can be provided if the default 
            <see cref="T:log4net.Layout.Pattern.JsonPatternConverter"/> is used or another implementation 
            follows this convention:
            log4net property: renderer, type <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>
            log4net property: fetcher, type <see cref="T:log4net.Layout.IRawLayout"/>
            </para>
            <para>
            Collected <i>arrangements</i> and <i>converters</i> are also passed as properties and used in 
            <see cref="T:log4net.Layout.Pattern.JsonPatternConverter"/>:
            log4net property: arrangement, type <see cref="T:log4net.Layout.Arrangements.IArrangement"/>
            log4net property: converters, type <see cref="T:log4net.Util.ConverterInfo"/>[]
            </para>
            <para>
            This class is not concerned with how the data is rendered. It only provides a configuration shortcut
            to organize members into structures suitable for JSON serialization. Serialization is then performed
            by a PatternConverter, the <see cref="T:log4net.Layout.Pattern.JsonPatternConverter"/> by default.
            </para>
            </remarks>
            <example>
            You can use a default configuration. Note that default default default is used when no other arrangements exist.
            <code>
            &lt;default /&gt; to use the default default members
            &lt;value value="nxlog" /&gt; to use the default members suitable for nxlog
            </code>
            </example>
            <example>
            You can use member configurations:
            <code>
            &lt;default /&gt; to use a default before any custom members.
            &lt;member value="nxlog" /&gt; to use the default members suitable for nxlog.
            &lt;member&gt; value="nxlog" /&gt; to use the default members suitable for nxlog.
            </code>
            </example>
            <example>
            You can use the pattern configuration to allow simple configurations of complex requirements:
            <code>
            &lt;arrangement value="MyOwnMember:appdomain" /&gt; to add a member with custom name.
            &lt;arrangement value="Day|It is %date{dddd} today" /&gt;. to render members using <see cref="T:log4net.Layout.PatternLayout"/>.
            &lt;arrangement value="Host=Name:hostname\;ProcessId\;Memory\;timestamp" /&gt;. to add nested members (note the \;).
            &lt;arrangement value="log4net.Layout.Arrangements.RemovalArrangement!" /&gt;. to add any custom arrangement.
            &lt;arrangement value="log4net.Layout.Arrangements.RemovalArrangement!Message" /&gt;. to add any custom arrangement with an option.
            &lt;arrangement value="Month%date:MMM" /&gt;. to run a <see cref="T:log4net.Layout.PatternLayout"/> converter with an option (useful more in conversionPattern).
            &lt;arrangement value="DEFAULT!nxlog" /&gt;. to add a default arrangement.
            &lt;arrangement value="CLEAR" /&gt;. to add remove all members.
            &lt;arrangement value="REMOVE!Source.*" /&gt;. to add remove specific members matching Regex pattern.
            </code>
            </example>
            <example>
            You can remove members from default:
            <code>
            &lt;default /&gt; to use a default before any custom members.
            &lt;remove value="Message" /&gt; to remove the Message member.
            &lt;arrangement value="Data:message" /&gt; to use reintroduce the message under different name.
            </code>
            </example>
            <example>
            You can also use the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern"/> configurations:
            <code>
            &lt;conversionPattern&gt; value="DEFAULT!nxlog;UserName;HostName" /&gt; to use the default members suitable for nxlog, username and hostname.
            &lt;conversionPattern&gt; value="%d ... %serialize ..." /&gt; to use the <see cref="T:log4net.Layout.PatternLayout"/> style.
            </code>
            </example>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Layout.SerializedLayout.DefaultSerializePattern">
            <summary>
            This will be used as a default conversion pattern.
            Destination: <seealso cref="P:log4net.Layout.PatternLayout.ConversionPattern"/>
            </summary>
        </member>
        <member name="F:log4net.Layout.SerializedLayout.DefaultSerializerName">
            <summary>
            This is the default serializing pattern converter name, 
            which should match (+%) with the pattern. 
            Destination: <seealso cref="P:log4net.Layout.SerializedLayout.SerializerName"/>
            </summary>
        </member>
        <member name="F:log4net.Layout.SerializedLayout.DefaultSerializerType">
            <summary>
            The default type of serializing pattern converter. 
            Destination: <seealso cref="P:log4net.Layout.SerializedLayout.SerializerType"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.#cctor">
            <summary>
            Static constructor to initialize the environment - <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.Init"/>.
            </summary>
        </member>
        <member name="F:log4net.Layout.SerializedLayout.m_arrangement">
            <summary>
            Keep the collected arrangements here.
            </summary>
        </member>
        <member name="F:log4net.Layout.SerializedLayout.m_constructed">
            <summary>
            FIXME: Who know why the parrent class calls ActivateOptions() from constructor?
            It seems unnecessary and causes issues here. We use this field to 
            suspend the call to ActivateOptions() from constructor
            </summary>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.#ctor">
            <summary>
            Constructs an JsonLayout with empty <i>Members</i>, no <i>Style</i>, and default <i>serializer</i>.
            </summary>
            <remarks>
            <para>
            The default just produces an empty JSON object string.
            </para>
            <para>
            As per the <see cref="T:log4net.Core.IOptionHandler"/> contract the <see cref="M:log4net.Layout.SerializedLayout.ActivateOptions"/>
            method must be called after the properties on this object have been
            configured.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to properties.
            </summary>
            <remarks>
            <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
            <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
            <para>
            The strange constructor call to this method is suspended using 
            <see cref="F:log4net.Layout.SerializedLayout.m_constructed"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the Serializer.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            If Serializer is not set, we default to base implementation.
            </remarks>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.CreateSerializer(log4net.Util.ConverterInfo)">
            <summary>
            Fetch our own <see cref="T:log4net.Util.PatternConverter"/> Serializer.
            </summary>
            <param name="info">description of the PatternConverter</param>
            <returns>pattern converter set up</returns>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.SetUpSerializer(log4net.Util.PatternConverter,log4net.Util.ConverterInfo[],log4net.Layout.Arrangements.IArrangement)">
            <summary>
            Add <see cref="P:log4net.Util.PatternConverter.Properties"/>, call <see cref="M:log4net.Core.IOptionHandler.ActivateOptions"/> 
            </summary>
            <param name="conv">serializer to be set up</param>
            <param name="converters">converters to be used collected from parent class</param>
            <param name="arrangement">arrangement to be used collected from parent class</param>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.CreateSerializerInfo(System.String,System.Type)">
            <summary>
            Instantiate our own Serializer info
            </summary>
            <remarks>
            <see cref="P:log4net.Layout.SerializedLayout.SerializerName"/> and <see cref="P:log4net.Layout.SerializedLayout.SerializerType"/> properties
            </remarks>
            <returns>the info created</returns>
            <exception cref="T:System.InvalidOperationException">for invalid types see <see cref="T:log4net.Util.PatternConverter"/> abstract class.</exception>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.AddArrangement(log4net.Layout.Arrangements.IArrangement)">
            <summary>
            Add an arbitrary <see cref="T:log4net.Layout.Arrangements.IArrangement"/>. 
            This method will be most useful for XML configuration.
            </summary>
            <param name="value">the arrangement</param>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.AddDefault(log4net.Layout.Arrangements.DefaultArrangement)">
            <summary>
            Add an <see cref="T:log4net.Layout.Arrangements.DefaultArrangement"/> that can be plain pattern string.
            This method will be most useful for XML configuration.
            </summary>
            <param name="value">the arrangement</param>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.AddMember(log4net.Layout.Members.IMember)">
            <summary>
            Add a single <see cref="T:log4net.Layout.Members.Member"/> that can be plain pattern string. 
            Note that <see cref="T:log4net.Layout.Members.Member"/> implements <see cref="T:log4net.Layout.Arrangements.IArrangement"/> as well.
            This method will be most useful for XML configuration.
            </summary>
            <param name="value">the member</param>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.AddRemove(log4net.Layout.Arrangements.RemovalArrangement)">
            <summary>
            With <see cref="T:log4net.Layout.Arrangements.RemovalArrangement"/> remove all or 
            <seealso cref="T:System.Text.RegularExpressions.Regex"/> specific members.
            This method will be most useful for XML configuration.
            </summary>
            <param name="value">the removal</param>
        </member>
        <member name="M:log4net.Layout.SerializedLayout.Clear">
            <summary>
            Remove all members.
            This method will be most useful for XML configuration.
            </summary>
        </member>
        <member name="P:log4net.Layout.SerializedLayout.SerializerType">
            <summary>
            The type of serializing conversion pattern to use.
            </summary>
        </member>
        <member name="P:log4net.Layout.SerializedLayout.SerializerName">
            <summary>
            The name to use for the serializing conversion pattern
            </summary>
        </member>
        <member name="P:log4net.Layout.SerializedLayout.Serializer">
            <summary>
            The serializer used to <see cref="M:log4net.Layout.SerializedLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)"/> the <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
        </member>
        <member name="T:log4net.ObjectRenderer.JsonObjectRenderer">
            <summary>
            This is the default inmplementation of ISerializer used by JsonLayout. 
            It uses the .net35 System.Web.Script.Serialization.JavaScriptSerializer in turn.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.ObjectRenderer.JsonObjectRenderer.Default">
            <summary>
            The bare minimal default serializer - static cache
            </summary>
        </member>
        <member name="M:log4net.ObjectRenderer.JsonObjectRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Write the object value as Json string into the writer using the serializer
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="obj">Object to be serialized</param>
            <param name="writer">Will receive the serialized data of obj</param>
        </member>
        <member name="M:log4net.ObjectRenderer.JsonObjectRenderer.GetSerializer(log4net.ObjectRenderer.RendererMap,System.Object)">
            <summary>
            Create serializer for a specific call
            </summary>
            <returns>serializer instance</returns>
        </member>
        <member name="P:log4net.ObjectRenderer.JsonObjectRenderer.Factory">
            <summary>
            Factory of the serializer implementation
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.ArrangementConverter">
            <summary>
            Supports conversion from string or <see cref="T:log4net.Util.PatternString"/> to <see cref="T:log4net.Layout.Arrangements.IArrangement"/> type.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)">
            <summary>
            Convert string option into an arrangement using <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)"/> 
            </summary>
            <param name="option">pattern, see <seealso cref="M:log4net.Util.TypeConverters.ArrangementConverter.ConvertFrom(System.Object)"/> for more info on formatting</param>
            <returns>the arrangement instance</returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.Init">
            <summary>
            Initialize the environment: register Arrangement Type Converters 
            with the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an <see cref="T:log4net.Layout.Arrangements.IArrangement"/></param>
            <returns>the arrangement</returns>
            <remarks>
            <para>
            "MemberName" =&gt; add member of name "MemberName"
            "MemberName:message" =&gt; add member named "MemberName" with the value of conversion of name "message"
            "MemberName=message\;exception" =&gt; add member named "MemberName" with the value of {message="...",exception="..."}
            "MemberName%date:dddd" =&gt; add member named "MemberName" with the value of PatternLayout for "%date{dddd}"
            "MemberName|%message%n" =&gt; add member named "MemberName" with the value of PatternLayout for "%message%n"
            "DEFAULT" =&gt; add member default members
            "DEFAULT!nxlog" =&gt; add member default members suitable for nxlog
            "CLEAR" =&gt; remove all members
            "REMOVE:^ex.*n$" remove member whose name matches regex "^ex.*n$"
            "DEFAULT!nxlog;Host=Name:hostname\;ProcessId\;Memory\;TimeStamp" =&gt; composite configuration
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.ParseArangement(System.String)">
            <summary>
            Parse a single member arrangement
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.ParseArrangementSet(System.String)">
            <summary>
            Parse a composite arrangement
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.Clean(System.Text.RegularExpressions.Match)">
            <summary>
            Unescape matched escaped characters
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ArrangementConverter.Brackets(System.Text.RegularExpressions.Match)">
            <summary>
            Unescape matched escaped brackets
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:log4net.Plugin.JsonPlugin">
            <summary>
            Not sure if this should stay. 
            This log4net plugin will register <see cref="T:log4net.ObjectRenderer.JsonObjectRenderer"/>
            and add a "json" Conversion pattern to all <see cref="T:log4net.Layout.ILayout"/>s.
            </summary>
            <remarks>
            If you put the following in your assembly, the log4net logging will 
            be magically JSONified without much need for xml configuration:
            [assembly: log4net.Config.Plugin(typeof(JsonPlugin))]
            Then you can just use conversion pattern %json or %json{with further options} in your PatternLayout.
            Though using SerializedLayout still gives much more flexibility
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Plugin.JsonPlugin.Init">
            <summary>
            Call <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.Init"/> and <see cref="M:log4net.Util.TypeConverters.LayoutConverter.Init(System.Boolean)"/> once.
            </summary>
        </member>
        <member name="M:log4net.Plugin.JsonPlugin.#ctor">
            <summary>
            Create an instance and call <see cref="M:log4net.Plugin.JsonPlugin.Init"/>
            </summary>
        </member>
        <member name="M:log4net.Plugin.JsonPlugin.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Interfere with a repository
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:log4net.Plugin.JsonPlugin.Shutdown">
            <summary>
            Stop interferring
            </summary>
        </member>
        <member name="M:log4net.Plugin.JsonPlugin.Repo_ConfigurationChanged(System.Object,System.EventArgs)">
            <summary>
            Do the interferring
            </summary>
            <param name="sender">a repo</param>
            <param name="e">ignored</param>
        </member>
        <member name="P:log4net.Plugin.JsonPlugin.Name">
            <summary>
            Plugin name is the Type's AssemblyQualifiedName
            </summary>
        </member>
        <member name="P:log4net.Plugin.JsonPlugin.Repo">
            <summary>
            Attached repository
            </summary>
        </member>
        <member name="T:log4net.Layout.RawArrangedLayout">
            <summary>
            This <see cref="T:log4net.Layout.IRawLayout"/> facilitates arranged members retrieval 
            in the form of a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Layout.RawArrangedLayout.#ctor">
            <summary>
            Create instance and set Members to an empty list
            </summary>
        </member>
        <member name="M:log4net.Layout.RawArrangedLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Gather the <see cref="P:log4net.Layout.RawArrangedLayout.Members"/> in a dictionary
            </summary>
            <param name="loggingEvent"></param>
            <returns>dictionary of members</returns>
        </member>
        <member name="P:log4net.Layout.RawArrangedLayout.Members">
            <summary>
            The <see cref="T:log4net.Layout.Members.IMember"/>s to be put in a dictionary
            </summary>
        </member>
        <member name="T:log4net.Util.Enumerable">
            <summary>
            Utility static methods to provide compatibility with System.Linq
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Util.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Equivalent to System.Linq.Enumerable.Cast&lt;T>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Equivalent to System.Linq.Enumerable.ToArray&lt;T>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            A union implementation similar to System.Linq.Enumerable.Union&lt;T>
            except that null arguments are allowed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerations"></param>
            <returns></returns>
        </member>
        <member name="T:log4net.Layout.RawCallLayout">
            <summary>
            Utility class to facilitate lambda call layout from the code and <see cref="T:log4net.Layout.Members.Member"/> configuration.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Layout.RawCallLayout.s_processId">
            <summary>
            cache the proc id;
            </summary>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.#cctor">
            <summary>
            Initialize <see cref="P:log4net.Layout.RawCallLayout.StandardCalls"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.FindLayout(System.String,log4net.Util.ConverterInfo[])">
            <summary>
            Find an appropriate <see cref="T:log4net.Layout.IRawLayout"/> for the specified conversion name using own defaults or <see cref="T:log4net.Util.ConverterInfo"/>s provided.
            </summary>
            <param name="name">name of conversion</param>
            <param name="converters">converters we can use to work out the conversions</param>
            <returns>call found</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.FindLayout(System.String,System.Collections.Generic.IEnumerable{log4net.Layout.RawCallLayout})">
            <summary>
            Find an appropriate <see cref="T:log4net.Layout.RawCallLayout"/> for the specified conversion name among the <see cref="T:log4net.Layout.RawCallLayout"/>s provided.
            </summary>
            <param name="name">name of conversion</param>
            <param name="calls">calls to be searched</param>
            <returns>call found</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.GetCalls(log4net.Util.ConverterInfo[])">
            <summary>
            Get the standard calls enhanced by converters
            </summary>
            <param name="converters"></param>
            <returns>enhanced standard calls</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.CombineCalls(System.Collections.Generic.IEnumerable{log4net.Layout.RawCallLayout},log4net.Util.ConverterInfo[])">
            <summary>
            Combine provided converters (first) and the existing calls
            </summary>
            <param name="calls">existing calls</param>
            <param name="converters">converters to include</param>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.MakeStandardCalls(System.Collections.Generic.IEnumerable{log4net.Layout.RawCallLayout})">
            <summary>
            Add the standard (in the opinion of this class) conversions.
            </summary>
            <remarks>
            <para>
            TODO: (Rant) I'm not entirely happy with this monster. 
            I wish s_globalRulesRegistry and friends in <seealso cref="T:log4net.Layout.PatternLayout"/>  
            would better lend themselves to code reuse.
            There could be a simple ConvertorCollection class exposing that functionality 
            which I'd re-use to create the following matrix with the already declared convertors.
            </para>
            </remarks>
            <param name="calls">calls to add to</param>
            <returns>calls added</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.AddCalls(System.Collections.Generic.IEnumerable{log4net.Layout.RawCallLayout}@,log4net.Util.RawCallDelegate,System.String[])">
            <summary>
            Make a union of existing calls and new call provided for each name
            </summary>
            <param name="calls">existing calls</param>
            <param name="layoutCall">lambda call providing value for logging event to be turned into <see cref="T:log4net.Layout.IRawLayout"/></param>
            <param name="name">valid names for the conversion</param>
        </member>
        <member name="F:log4net.Layout.RawCallLayout.m_getter">
            <summary>
            Function to retrieve a value from a <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
        </member>
        <member name="F:log4net.Layout.RawCallLayout.m_info">
            <summary>
            If constructed from such, the original <see cref="T:log4net.Util.ConverterInfo"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.#ctor(System.String,log4net.Util.RawCallDelegate)">
            <summary>
            Create a named instance from a (lambda) function
            </summary>
            <param name="name">conversion name</param>
            <param name="getter">function</param>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.#ctor(System.String,log4net.Util.PatternConverter)">
            <summary>
            Create a named instance from a <see cref="T:log4net.Util.PatternConverter"/> 
            </summary>
            <param name="name">conversion name</param>
            <param name="converter">pattern converter</param>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.#ctor(System.String,log4net.Util.PatternString)">
            <summary>
            Create a named instance from a <see cref="T:log4net.Util.PatternConverter"/> 
            </summary>
            <param name="name">conversion name</param>
            <param name="pattern">pattern string</param>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.#ctor(log4net.Util.ConverterInfo)">
            <summary>
            Create an instance from a <see cref="T:log4net.Util.ConverterInfo"/>, instantiating it's <see cref="T:log4net.Util.PatternConverter"/>.
            </summary>
            <remarks>
            Properties["option"] (a <see cref="T:System.String"/>) can be used to set an option on the converter instance.
            </remarks>
            <param name="info"></param>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Call the getter
            </summary>
            <param name="loggingEvent">the event to get a value for/from</param>
            <returns>the value gotten</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.Format(log4net.Util.PatternConverter,log4net.Core.LoggingEvent)">
            <summary>
            Helper method to call the <see cref="M:log4net.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)"/>
            </summary>
            <param name="conv">converter to call</param>
            <param name="loggingEvent">event to render</param>
            <returns>value retrieved</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.Equals(System.Object)">
            <summary>
            This is handy when jamming calls together to avoid duplicates. See the <see cref="M:log4net.Layout.RawCallLayout.CombineCalls(System.Collections.Generic.IEnumerable{log4net.Layout.RawCallLayout},log4net.Util.ConverterInfo[])"/> method.
            </summary>
            <param name="obj">to compare to</param>
            <returns>same</returns>
        </member>
        <member name="M:log4net.Layout.RawCallLayout.GetHashCode">
            <summary>
            The compiler complained...
            </summary>
            <returns>what the base gives</returns>
        </member>
        <member name="P:log4net.Layout.RawCallLayout.StandardCalls">
            <summary>
            A list of standard conversions to be used by <see cref="T:log4net.Layout.Members.Member"/>
            </summary>
        </member>
        <member name="P:log4net.Layout.RawCallLayout.Name">
            <summary>
            The name of a conversion
            </summary>
        </member>
        <member name="T:log4net.Layout.Members.IMember">
            <summary>
            This interface is used by the <see cref="T:log4net.Layout.SerializedLayout"/> to represent a serialized member value.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="T:log4net.Layout.Arrangements.IArrangement">
            <summary>
            Used by <see cref="T:log4net.Layout.SerializedLayout"/>, this interface allows the organization of the members to be serialized.
            It may be used to simply add or remove members or to do any kinf of magic on the list.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Layout.Arrangements.IArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Organize the <see cref="T:log4net.Layout.Members.IMember"/>s to be serialized
            </summary>
            <param name="members">Members to be arranged</param>
        </member>
        <member name="M:log4net.Layout.Arrangements.IArrangement.SetConverters(log4net.Util.ConverterInfo[])">
            <summary>
            Converters should be passed down the chain from the hosting <see cref="T:log4net.Layout.SerializedLayout"/>.
            These are then used to render members.
            </summary>
            <param name="converters"></param>
        </member>
        <member name="M:log4net.Layout.Arrangements.IArrangement.SetOption(System.String)">
            <summary>
            All arrangements can take an option which is handy for XML configuration and to simplify set up.
            </summary>
            <param name="value">The option specific to the arrangement implementation</param>
        </member>
        <member name="P:log4net.Layout.Members.IMember.Name">
            <summary>
            Name of value to be serialized
            </summary>
        </member>
        <member name="P:log4net.Layout.Members.IMember.Layout">
            <summary>
            A converter which will draw a specific value from a logging event
            </summary>
        </member>
        <member name="T:log4net.Layout.Arrangements.MultipleArrangement">
            <summary>
            This <see cref="T:log4net.Layout.Arrangements.IArrangement"/> allows the organization of the members to be serialized.
            Here we merely allow multiple arrangements to be represented by a single object.
            </summary>
            <remarks>
            <para>
            It's used by <see cref="T:log4net.Layout.SerializedLayout"/> and <see cref="T:log4net.Util.TypeConverters.ArrangementConverter"/> internally.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="T:log4net.Layout.Arrangements.NoArrangement">
            <summary>
            This <see cref="T:log4net.Layout.Arrangements.IArrangement"/> represents no arrangements intended
            which is returned instead of null from <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/>. 
            </summary>
            <remarks>
            <para>
            It is statically cached in <see cref="F:log4net.Layout.Arrangements.NoArrangement.Instance"/>.
            </para>
            <para>
            It is used as a base for other implementations.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Layout.Arrangements.NoArrangement.Instance">
            <summary>
            A static instance cache of the class
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.NoArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Organize the <see cref="T:log4net.Layout.Members.IMember"/>s to be serialized
            </summary>
            <remarks>By default, do nothing, which should be overriden by child class</remarks>
            <param name="members">Members to be arranged</param>
        </member>
        <member name="M:log4net.Layout.Arrangements.NoArrangement.SetConverters(log4net.Util.ConverterInfo[])">
            <summary>
            Converters should be passed down the chain from the hosting <see cref="T:log4net.Layout.SerializedLayout"/>.
            These are then used to render members. They are stored in <see cref="P:log4net.Layout.Arrangements.NoArrangement.Converters"/>.
            </summary>
            <param name="converters"></param>
        </member>
        <member name="M:log4net.Layout.Arrangements.NoArrangement.SetOption(System.String)">
            <summary>
            All arrangements can take an option which is handy for XML configuration and to simplify set up.
            </summary>
            <remarks>By default, there's no option taken, which should be overriden by child class</remarks>
            <param name="value">The option specific to the arrangement implementation</param>
        </member>
        <member name="P:log4net.Layout.Arrangements.NoArrangement.Converters">
            <summary>
            See <see cref="M:log4net.Layout.Arrangements.NoArrangement.SetConverters(log4net.Util.ConverterInfo[])"/>. This may be null.
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.MultipleArrangement.#ctor">
            <summary>
            Create instance with <see cref="P:log4net.Layout.Arrangements.MultipleArrangement.Arrangements"/> set
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.MultipleArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Simply call each and every one of the <see cref="P:log4net.Layout.Arrangements.MultipleArrangement.Arrangements"/>
            </summary>
            <param name="members">Members to be arranged</param>
        </member>
        <member name="M:log4net.Layout.Arrangements.MultipleArrangement.SetOption(System.String)">
            <summary>
            Parse the option as arrangement and add it to the list
            </summary>
            <param name="value">The option understood by <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/></param>
        </member>
        <member name="M:log4net.Layout.Arrangements.MultipleArrangement.AddArrangement(log4net.Layout.Arrangements.IArrangement)">
            <summary>
            Well, add an arrangement
            </summary>
            <param name="arrangement">Arrangement to add</param>
        </member>
        <member name="P:log4net.Layout.Arrangements.MultipleArrangement.Arrangements">
            <summary>
            All arrangements collected by <see cref="M:log4net.Layout.Arrangements.MultipleArrangement.AddArrangement(log4net.Layout.Arrangements.IArrangement)"/>
            </summary>
        </member>
        <member name="T:log4net.Util.Serializer.ISerializerFactory">
            <summary>
            Create serializers
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Util.Serializer.ISerializerFactory.GetSerializer(System.Object,log4net.ObjectRenderer.RendererMap)">
            <summary>
            Creates a <see cref="T:log4net.Util.Serializer.ISerializer"/> with a specific <paramref name="map"/>
            </summary>
            <param name="obj">object to get a serializer for</param>
            <param name="map">renderer map to consider</param>
            <returns>a serializer for <paramref name="obj"/></returns>
        </member>
        <member name="T:log4net.Layout.Arrangements.OptionArrangement">
            <summary>
            This <see cref="T:log4net.Layout.Arrangements.IArrangement"/> allows the organization of the members to be serialized.
            An option is recognised and processed by <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/>
            </summary>
            <remarks>
            <para>
            It is the base of the <see cref="T:log4net.Layout.Arrangements.DefaultArrangement"/> class.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Layout.Arrangements.OptionArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Parse the Arrangement string and use the new arrangement instance.
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:log4net.Layout.Arrangements.OptionArrangement.SetOption(System.String)">
            <summary>
            Set the <see cref="P:log4net.Layout.Arrangements.OptionArrangement.Arrangement"/> option
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:log4net.Layout.Arrangements.OptionArrangement.Arrangement">
            <summary>
            The arrangement option to be parsed by <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/>.
            </summary>
        </member>
        <member name="T:log4net.Util.Serializer.JsonSerializer">
            <summary>
            A simpleton implementation of a JSON serializer to supplement 
            System.Web.Script.Serialization.JavaScriptSerializer of NET35
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="T:log4net.Util.Serializer.ISerializer">
            <summary>
            Serialize objects
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Util.Serializer.ISerializer.Serialize(System.Object)">
            <summary>
            Serialize object
            </summary>
            <param name="obj">object to serialize</param>
            <returns>serialized data</returns>
        </member>
        <member name="F:log4net.Util.Serializer.JsonSerializer.DefaultSerializerFactory">
            <summary>
            Which serializer will be used by default?
            </summary>
            <remarks>
            Creating JsonSerializer here
            </remarks>
        </member>
        <member name="F:log4net.Util.Serializer.JsonSerializer.EscapedChars">
            <summary>
            JSON escaped characters
            </summary>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize <paramref name="obj"/> to a JSON string
            </summary>
            <param name="obj">object to serialize</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            Serialize any object into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeDateTime(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Serialize date and time into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeTimeSpan(System.TimeSpan,System.Text.StringBuilder)">
            <summary>
            Serialize time span into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializePrimitive(System.Object,System.Text.StringBuilder)">
            <summary>
            Serialize int's, byte's, char's, bools and friends into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeDictionary(System.Collections.IDictionary,System.Text.StringBuilder)">
            <summary>
            Serialize a dictionary into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeArray(System.Collections.IEnumerable,System.Text.StringBuilder)">
            <summary>
            Serialize enumerables into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeObject(System.Object,System.Text.StringBuilder)">
            <summary>
            Serialize an object (last resort) into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.SerializeString(System.Object,System.Text.StringBuilder)">
            <summary>
            Serialize escaped string into a string builder
            </summary>
            <param name="obj"></param>
            <param name="sb"></param>
        </member>
        <member name="P:log4net.Util.Serializer.JsonSerializer.Map">
            <summary>
            RendererMap given by the layout
            </summary>
        </member>
        <member name="T:log4net.Util.Serializer.JsonSerializer.Factory">
            <summary>
            Creates JsonSerializer
            </summary>
        </member>
        <member name="M:log4net.Util.Serializer.JsonSerializer.Factory.GetSerializer(System.Object,log4net.ObjectRenderer.RendererMap)">
            <summary>
            Create JsonSerializer
            </summary>
            <param name="obj"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="T:log4net.Util.RawCallDelegate">
            <summary>
            A delegate to be called by <see cref="T:log4net.Layout.RawCallLayout"/>
            </summary>
            <param name="loggingEvent"></param>
            <returns>converted value</returns>
            <author>Robert Sevcik</author>
        </member>
        <member name="T:log4net.Layout.Members.Member">
            <summary>
            A common value implementation of INamedValue and IRawLayout for simple configuration.
            Some commonly used values should be addressed here with sensible output formatting.
            </summary>
            <remarks>
            <para>
            Use this class to easily configure more complex values. This is achieved by 
            specifying an <see cref="P:log4net.Layout.Members.Member.Option"/>.
            </para>
            <para>
            This class is also used internally to deliver sensible defaults for values.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Layout.Members.Member.Format(log4net.Core.LoggingEvent)">
            <summary>
            If a value cannot be retrieved from the separate NestedLayout object
            a set of known vallues would be tried. If that fails too, UndefinedValue is returned.
            </summary>
            <param name="loggingEvent">the event to get values for/from</param>
            <returns>Object retrieved from logging event</returns>
        </member>
        <member name="M:log4net.Layout.Members.Member.ActivateOptions">
            <summary>
            When configured by XML or by <see cref="T:log4net.Util.TypeConverters.ArrangementConverter"/> in general,
            the <see cref="P:log4net.Layout.Members.Member.Option"/> is tried to figure out the <see cref="T:log4net.Layout.IRawLayout"/> to use.
            </summary>
            <remarks>
            It can be a <see cref="T:log4net.Util.PatternString"/>, then the option will be stringified.
            It can be a <see cref="T:System.String"/>, then <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/> will be attempted.
            It can be an <see cref="T:log4net.Layout.Arrangements.IArrangement"/>, then it will be used to arrange a new <see cref="T:log4net.Layout.RawArrangedLayout"/>
            It can be another <see cref="T:log4net.Layout.Members.IMember"/>, then if Name was not set yet it will be adopted.
            It can be a <see cref="T:log4net.Util.ConverterInfo"/>, then a new RawCallLayout will be set up around it.
            It can be a <see cref="T:log4net.Util.PatternParser"/>, then a new RawCallLayout will be set up around it.
            </remarks>
        </member>
        <member name="M:log4net.Layout.Members.Member.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Add this member to the list.
            </summary>
            <param name="members">Members to be arranged</param>
        </member>
        <member name="M:log4net.Layout.Members.Member.SetOption(System.String)">
            <summary>
            Set the <see cref="P:log4net.Layout.Members.Member.Option"/>
            </summary>
            <param name="value">the option</param>
        </member>
        <member name="M:log4net.Layout.Members.Member.GetLayout(System.String)">
            <summary>
            Find a matching layout for this Member using known values and converters. 
            See <see cref="M:log4net.Layout.RawCallLayout.FindLayout(System.String,log4net.Util.ConverterInfo[])"/>
            </summary>
            <param name="name">member name</param>
            <returns>layout found</returns>
        </member>
        <member name="M:log4net.Layout.Members.Member.GetLayoutValue(log4net.Core.LoggingEvent,System.Object@)">
            <summary>
            The NestedLayout is tried to provide a value
            </summary>
            <param name="loggingEvent">the event to get value from</param>
            <param name="obj">value found</param>
            <returns>success of finding a NestedLayout not null</returns>
        </member>
        <member name="M:log4net.Layout.Members.Member.GetDefaultValue(log4net.Core.LoggingEvent,System.Object@)">
            <summary>
            The NestedLayout is tried to provide a value
            </summary>
            <param name="loggingEvent">the event to get value from</param>
            <param name="obj">value found</param>
            <returns>success of finding a NestedLayout not null</returns>
        </member>
        <member name="M:log4net.Layout.Members.Member.GetPropertyValue(log4net.Core.LoggingEvent,System.Object@)">
            <summary>
            Try to get a property value with exact match
            </summary>
            <param name="loggingEvent">the event to get value from</param>
            <param name="obj">value found</param>
            <returns>success of matching a known value</returns>
        </member>
        <member name="P:log4net.Layout.Members.Member.Name">
            <summary>
            Name of value to be serialized as.
            </summary>
        </member>
        <member name="P:log4net.Layout.Members.Member.Option">
            <summary>
            Option used to configure this object in <see cref="M:log4net.Layout.Members.Member.ActivateOptions"/>. 
            It should help to figure out the <see cref="T:log4net.Layout.IRawLayout"/> to use.
            Otherwise Option will be used directly as a value.
            </summary>
        </member>
        <member name="P:log4net.Layout.Members.Member.Layout">
            <summary>
            Back reference to "this" for simple configuration.
            </summary>
        </member>
        <member name="T:log4net.Layout.Arrangements.RemovalArrangement">
            <summary>
            This <see cref="T:log4net.Layout.Arrangements.IArrangement"/> will just empty the values; either all or those matching a regex option.
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Layout.Arrangements.RemovalArrangement.m_nameRegex">
            <summary>
            Parsed <see cref="P:log4net.Layout.Arrangements.RemovalArrangement.NameRegex"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.RemovalArrangement.#ctor">
            <summary>
            Create instance without a <see cref="P:log4net.Layout.Arrangements.RemovalArrangement.NameRegex"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.RemovalArrangement.#ctor(System.String)">
            <summary>
            Create instance with a <see cref="P:log4net.Layout.Arrangements.RemovalArrangement.NameRegex"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.RemovalArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            Remove members whose name matches regular expression
            </summary>
            <param name="members">values to arrange</param>
            <returns>arranged values</returns>
        </member>
        <member name="M:log4net.Layout.Arrangements.RemovalArrangement.SetOption(System.String)">
            <summary>
            Set the <see cref="P:log4net.Layout.Arrangements.RemovalArrangement.NameRegex"/>
            </summary>
            <param name="value">regular expression</param>
        </member>
        <member name="P:log4net.Layout.Arrangements.RemovalArrangement.NameRegex">
            <summary>
            The regular expression used to match member names for removal. If null, all members shall be removed.
            </summary>
        </member>
        <member name="T:log4net.Layout.Pattern.JsonPatternConverter">
            <summary>
            Render the <see cref="T:log4net.Layout.Members.Member"/>s using <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer"/> or using <see cref="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)"/>.
            Log4net properties can set (likely through <see cref="T:log4net.Util.ConverterInfo"/>) to provide custom 
            <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer"/>, <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher"/> and to pass <see cref="T:log4net.Layout.Arrangements.IArrangement"/> 
            and <see cref="T:log4net.Util.ConverterInfo"/>s from hosting layout.
            Option can be set to introduce an additional <see cref="T:log4net.Layout.Arrangements.IArrangement"/>
            Use it in a custom <see cref="P:log4net.Layout.PatternLayout.ConversionPattern"/> like this: "%serialize{DEFAULT;PID:processid}"
            </summary>
            <author>Robert Sevcik</author>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.#ctor">
            <summary>
            Create instance with a default <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher"/> and <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Render an object which will most likely be a <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
            <param name="writer"></param>
            <param name="state"></param>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Render what comes from the  <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher"/> using  <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer"/> or default renderer.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent"/> on which the pattern converter should be executed.</param>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Render <paramref name="obj"/> into the <paramref name="writer"/>
            </summary>
            <param name="map">from <see cref="P:log4net.Core.LoggingEvent.Repository"/></param>
            <param name="obj">value to be rendered</param>
            <param name="writer">writer to write obj to</param>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to properties.
            <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer"/> of type <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> is taken from Properties["renderer"] if missing
            <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher"/> of type <see cref="T:log4net.Layout.IRawLayout"/> is taken from Properties["fetcher"] if missing
            <see cref="T:log4net.Layout.Arrangements.IArrangement"/> is taken from Properties["arrangement"] and from <i>option</i>.
            Converters to be used in arrangements are taken from Properties["converters"], an array of <see cref="T:log4net.Util.ConverterInfo"/>
            Members are arranged using <see cref="M:log4net.Layout.Pattern.JsonPatternConverter.Prepare(System.String,System.Collections.Generic.IList{log4net.Layout.Members.IMember},log4net.Util.ConverterInfo[],log4net.Layout.Arrangements.IArrangement)"/>
            </summary>
            <remarks>
            <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
            <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.JsonPatternConverter.Prepare(System.String,System.Collections.Generic.IList{log4net.Layout.Members.IMember},log4net.Util.ConverterInfo[],log4net.Layout.Arrangements.IArrangement)">
            <summary>
            Prepare the Members using arrangements. See <see cref="M:log4net.Layout.Pattern.JsonPatternConverter.ActivateOptions"/>
            </summary>
            <param name="option">Option to parse into an additional <see cref="T:log4net.Layout.Arrangements.IArrangement"/> using <see cref="M:log4net.Util.TypeConverters.ArrangementConverter.GetArrangement(System.String)"/></param>
            <param name="members">Members to be arranged</param>
            <param name="converters">Converters used for arrangement</param>
            <param name="arrangement">Arrangement to organize the members</param>
        </member>
        <member name="P:log4net.Layout.Pattern.JsonPatternConverter.Renderer">
            <summary>
            How to render the members is decided here. By default it is a <see cref="F:log4net.ObjectRenderer.JsonObjectRenderer.Default"/>
            </summary>
        </member>
        <member name="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher">
            <summary>
            What to render is decided here. By default it is a <see cref="T:log4net.Layout.RawArrangedLayout"/> 
            and it's members can be arranged - see <see cref="M:log4net.Layout.Pattern.JsonPatternConverter.Prepare(System.String,System.Collections.Generic.IList{log4net.Layout.Members.IMember},log4net.Util.ConverterInfo[],log4net.Layout.Arrangements.IArrangement)"/>
            </summary>
        </member>
        <member name="P:log4net.Layout.Pattern.JsonPatternConverter.Members">
            <summary>
            If the default <see cref="P:log4net.Layout.Pattern.JsonPatternConverter.Fetcher"/> (<see cref="T:log4net.Layout.RawArrangedLayout"/>) is used, these are it's Members.
            These members can be arranged - see <see cref="M:log4net.Layout.Pattern.JsonPatternConverter.Prepare(System.String,System.Collections.Generic.IList{log4net.Layout.Members.IMember},log4net.Util.ConverterInfo[],log4net.Layout.Arrangements.IArrangement)"/>
            </summary>
        </member>
        <member name="T:log4net.Layout.Arrangements.DefaultArrangement">
            <summary>
            This <see cref="T:log4net.Layout.Arrangements.IArrangement"/> will put together few most obvious values as defaults.
            These <see cref="F:log4net.Layout.Arrangements.DefaultArrangement.ConfigDefaults"/> are the options recognized by <see cref="T:log4net.Util.TypeConverters.ArrangementConverter"/>.
            </summary>
            <remarks>
            <para>
            If no other arrangement is set for the <see cref="T:log4net.Layout.SerializedLayout"/> it will add a default default by default.
            </para>
            <para>
            It is used by <see cref="M:log4net.Layout.SerializedLayout.AddDefault(log4net.Layout.Arrangements.DefaultArrangement)"/> to allow simple xml configuration 
            &lt;default value="nxlog" /&gt; or simply &lt;default /&gt;.
            </para>
            <para>
            It is used by <see cref="T:log4net.Util.TypeConverters.ArrangementConverter"/> to represent "DEFAULT:nxlog" or simply "DEFAULT" 
            in the serialize conversion pattern option.
            </para>
            <para>
            The arrangement is actually done by the base <see cref="T:log4net.Layout.Arrangements.OptionArrangement"/> implementation.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Layout.Arrangements.DefaultArrangement.DefaultDefaultDefault">
            <summary>
            This is the default <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/> containing "default" :o)
            </summary>
        </member>
        <member name="F:log4net.Layout.Arrangements.DefaultArrangement.ConfigDefaults">
            <summary>
            A dictionary of default options which are recognized by <see cref="T:log4net.Util.TypeConverters.ArrangementConverter"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.DefaultArrangement.#ctor">
            <summary>
            Create an instance with <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/> = "default".
            Copy static <see cref="F:log4net.Layout.Arrangements.DefaultArrangement.ConfigDefaults"/> dictionary to <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.DefaultArrangement.#ctor(System.String)">
            <summary>
            Create an instance with specific <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/>.
            Copy static <see cref="F:log4net.Layout.Arrangements.DefaultArrangement.ConfigDefaults"/> dictionary to <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/>
            </summary>
        </member>
        <member name="M:log4net.Layout.Arrangements.DefaultArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})">
            <summary>
            This implementation will pick a <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/> from <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/>
            and call the base <see cref="T:log4net.Layout.Arrangements.OptionArrangement"/> implementation on that
            </summary>
            <exception cref="T:System.Exception">When the <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/> is not found in <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/></exception>
            <param name="members">Members to be arranged</param>
        </member>
        <member name="M:log4net.Layout.Arrangements.DefaultArrangement.SetOption(System.String)">
            <summary>
            Chose the <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Default"/> of <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/>
            </summary>
            <remarks>
            base.SetOption(value) is called from <see cref="M:log4net.Layout.Arrangements.DefaultArrangement.Arrange(System.Collections.Generic.IList{log4net.Layout.Members.IMember})"/>
            </remarks>
            <param name="value">Config dictionary key</param>
        </member>
        <member name="P:log4net.Layout.Arrangements.DefaultArrangement.Default">
            <summary>
            Default option of <see cref="P:log4net.Layout.Arrangements.DefaultArrangement.Config"/>
            </summary>
        </member>
        <member name="P:log4net.Layout.Arrangements.DefaultArrangement.Config">
            <summary>
            Default values configuration
            </summary>
        </member>
    </members>
</doc>
